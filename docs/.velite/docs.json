[
  {
    "title": "Getting Started",
    "description": "Start using Mode Watcher in your Svelte application.",
    "path": "getting-started",
    "content": "<script>\n\timport { Steps, Step } from \"@svecodocs/kit\";\n</script>\n<h2>Installation &#x26; Setup</h2>\n<steps>\n<p><step>Install the package</step></p>\n<p>Install the <code>mode-watcher</code> package from npm.</p>\n<pre><code class=\"language-bash\">npm install mode-watcher\n</code></pre>\n<p><step>Add the ModeWatcher component</step></p>\n<p>Add the <code>&#x3C;ModeWatcher /></code> component to your root <code>+layout.svelte</code> file.</p>\n<pre><code class=\"language-svelte\" metastring=\"{2,5}#add title=&#x22;src/routes/+layout.svelte&#x22;\">&#x3C;script lang=\"ts\">\n\timport { ModeWatcher } from \"mode-watcher\";\n\tlet { children } = $props();\n&#x3C;/script>\n\n&#x3C;ModeWatcher />\n{@render children()}\n</code></pre>\n<p><step>That's it!</step></p>\n<p>You're now ready to use Mode Watcher in your Svelte app.</p>\n<p>Here's an example of how to use the <code>toggleMode</code> function to toggle the mode:</p>\n<pre><code class=\"language-svelte\" metastring=\"title=&#x22;src/lib/components/light-switch.svelte&#x22;\">&#x3C;script lang=\"ts\">\n\timport { toggleMode } from \"mode-watcher\";\n&#x3C;/script>\n\n&#x3C;button onclick={toggleMode}>Toggle Mode&#x3C;/button>\n</code></pre>\n<p>For additional information and configuration, please refer to the <a href=\"/docs/api-reference/mode-watcher\">API reference</a>.</p>\n</steps>",
    "raw": "<script>\n\timport { Steps, Step } from \"@svecodocs/kit\";\n</script>\n\n## Installation & Setup\n\n<Steps>\n\n<Step>Install the package</Step>\n\nInstall the `mode-watcher` package from npm.\n\n```bash\nnpm install mode-watcher\n```\n\n<Step>Add the ModeWatcher component</Step>\n\nAdd the `<ModeWatcher />` component to your root `+layout.svelte` file.\n\n```svelte {2,5}#add title=\"src/routes/+layout.svelte\"\n<script lang=\"ts\">\n\timport { ModeWatcher } from \"mode-watcher\";\n\tlet { children } = $props();\n</script>\n\n<ModeWatcher />\n{@render children()}\n```\n\n<Step>That's it!</Step>\n\nYou're now ready to use Mode Watcher in your Svelte app.\n\nHere's an example of how to use the `toggleMode` function to toggle the mode:\n\n```svelte title=\"src/lib/components/light-switch.svelte\"\n<script lang=\"ts\">\n\timport { toggleMode } from \"mode-watcher\";\n</script>\n\n<button onclick={toggleMode}>Toggle Mode</button>\n```\n\nFor additional information and configuration, please refer to the [API reference](/docs/api-reference/mode-watcher).\n\n</Steps>",
    "toc": [
      {
        "title": "Installation & Setup",
        "url": "#installation--setup",
        "items": []
      }
    ],
    "section": "Overview",
    "slug": "getting-started",
    "slugFull": "/getting-started"
  },
  {
    "title": "Introduction",
    "description": "What is Mode Watcher?",
    "path": "index",
    "content": "<p>Mode Watcher provides simple utilities to manage light &#x26; dark mode in your Svelte apps.</p>\n<h2>Features</h2>\n<ul>\n<li>Dark mode for your Svelte app with two lines of code.</li>\n<li>No flash of unstyled content, compatible with SSR, CSR and SSG.</li>\n<li>Detect and track <code>prefers-color-scheme</code> changes in real-time.</li>\n<li>Theme scrollbars and form controls through the <code>color-scheme</code> property.</li>\n<li>Theme surrounding browser interface through the <code>theme-color</code> meta tag.</li>\n<li>Allows users to toggle between light and dark mode or respect their system preference.</li>\n<li>User preference persistence thanks <code>localStorage</code> - syncs theme across tabs and windows.</li>\n<li>Allows for a default theme to be set.</li>\n<li>Disables CSS transitions during theme changes to prevent flickering.</li>\n</ul>",
    "raw": "Mode Watcher provides simple utilities to manage light & dark mode in your Svelte apps.\n\n## Features\n\n- Dark mode for your Svelte app with two lines of code.\n- No flash of unstyled content, compatible with SSR, CSR and SSG.\n- Detect and track `prefers-color-scheme` changes in real-time.\n- Theme scrollbars and form controls through the `color-scheme` property.\n- Theme surrounding browser interface through the `theme-color` meta tag.\n- Allows users to toggle between light and dark mode or respect their system preference.\n- User preference persistence thanks `localStorage` - syncs theme across tabs and windows.\n- Allows for a default theme to be set.\n- Disables CSS transitions during theme changes to prevent flickering.",
    "toc": [
      {
        "title": "Features",
        "url": "#features",
        "items": []
      }
    ],
    "section": "Overview",
    "slug": "index",
    "slugFull": "/index"
  },
  {
    "title": "Mode vs Theme",
    "description": "A comparison between mode and theme.",
    "path": "mode-vs-theme",
    "content": "<p>In Mode Watcher, <em>mode</em> and <em>theme</em> are distinct concepts. They work together, but they're not the same, and knowing the difference is key to using Mode Watcher effectively.</p>\n<h2>Mode</h2>\n<p>The mode represents the user's preference for a light or dark interface. It can be one of the following:</p>\n<ul>\n<li><code>\"light\"</code></li>\n<li><code>\"dark\"</code></li>\n<li><code>\"system\"</code> (follows the operating system’s preference)</li>\n</ul>\n<p>Mode Watcher uses this value to:</p>\n<ul>\n<li>Apply the correct <code>class</code> (<code>light</code> or <code>dark</code>) to the root <code>&#x3C;html></code> element</li>\n<li>Set the corresponding <code>color-scheme</code> (<code>light</code> or <code>dark</code>) for browser rendering</li>\n</ul>\n<p>This ensures consistent styling based on user or system preferences.</p>\n<h2>Theme</h2>\n<p>A theme is a design system that defines the visual identity of your application - colors, typography, spacing, layout, etc.</p>\n<p>Themes can include both light and dark variants. For example:</p>\n<ul>\n<li>A <code>dracula</code> theme might contain both <code>dracula-light</code> and <code>dracula-dark</code> styles.</li>\n<li>Mode Watcher automatically chooses the correct variant based on the current mode.</li>\n</ul>\n<p>You don't need to create separate themes like <code>dracula-light</code> and <code>dracula-dark</code>. Instead, provide a single <code>dracula</code> theme with both variants, and let Mode Watcher handle the switching.</p>\n<h2>Summary</h2>\n<ul>\n<li><strong>Mode</strong> = user's light/dark preference</li>\n<li><strong>Theme</strong> = overall design system (can adapt to mode)</li>\n</ul>\n<p>They're different layers of customization—mode controls which variant of the theme is shown.</p>",
    "raw": "In Mode Watcher, _mode_ and _theme_ are distinct concepts. They work together, but they're not the same, and knowing the difference is key to using Mode Watcher effectively.\n\n## Mode\n\nThe mode represents the user's preference for a light or dark interface. It can be one of the following:\n\n- `\"light\"`\n- `\"dark\"`\n- `\"system\"` (follows the operating system’s preference)\n\nMode Watcher uses this value to:\n\n- Apply the correct `class` (`light` or `dark`) to the root `<html>` element\n- Set the corresponding `color-scheme` (`light` or `dark`) for browser rendering\n\nThis ensures consistent styling based on user or system preferences.\n\n## Theme\n\nA theme is a design system that defines the visual identity of your application - colors, typography, spacing, layout, etc.\n\nThemes can include both light and dark variants. For example:\n\n- A `dracula` theme might contain both `dracula-light` and `dracula-dark` styles.\n- Mode Watcher automatically chooses the correct variant based on the current mode.\n\nYou don't need to create separate themes like `dracula-light` and `dracula-dark`. Instead, provide a single `dracula` theme with both variants, and let Mode Watcher handle the switching.\n\n## Summary\n\n- **Mode** = user's light/dark preference\n- **Theme** = overall design system (can adapt to mode)\n\nThey're different layers of customization—mode controls which variant of the theme is shown.",
    "toc": [
      {
        "title": "Mode",
        "url": "#mode",
        "items": []
      },
      {
        "title": "Theme",
        "url": "#theme",
        "items": []
      },
      {
        "title": "Summary",
        "url": "#summary",
        "items": []
      }
    ],
    "section": "Overview",
    "slug": "mode-vs-theme",
    "slugFull": "/mode-vs-theme"
  },
  {
    "title": "modeStorageKey",
    "description": "The key used to store the mode in local storage.",
    "path": "api-reference/mode-storage-key",
    "content": "<p>The key used to store the <code>mode</code> in local storage.</p>\n<h2>Usage</h2>\n<p>If you wanted to clear the history of the user's mode preference, you could use the <code>modeStorageKey</code> like so:</p>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { modeStorageKey } from \"mode-watcher\";\n\n\tfunction clearModeFromLocalStorage() {\n\t\tlocalStorage.removeItem(modeStorageKey.current);\n\t}\n&#x3C;/script>\n\n&#x3C;p>Clear the user's mode preference history.&#x3C;/p>\n&#x3C;button onclick={clearModeFromLocalStorage}>Clear&#x3C;/button>\n</code></pre>",
    "raw": "The key used to store the `mode` in local storage.\n\n## Usage\n\nIf you wanted to clear the history of the user's mode preference, you could use the `modeStorageKey` like so:\n\n```svelte\n<script lang=\"ts\">\n\timport { modeStorageKey } from \"mode-watcher\";\n\n\tfunction clearModeFromLocalStorage() {\n\t\tlocalStorage.removeItem(modeStorageKey.current);\n\t}\n</script>\n\n<p>Clear the user's mode preference history.</p>\n<button onclick={clearModeFromLocalStorage}>Clear</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/mode-storage-key",
    "slugFull": "/api-reference/mode-storage-key"
  },
  {
    "title": "<ModeWatcher />",
    "description": "API Reference for the ModeWatcher component.",
    "path": "api-reference/mode-watcher",
    "content": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n<h2>Usage</h2>\n<p>Add the <code>ModeWatcher</code> component to your root <code>+layout.svelte</code> component.</p>\n<pre><code class=\"language-svelte\" metastring=\"title=&#x22;src/routes/+layout.svelte&#x22;\">&#x3C;script lang=\"ts\">\n\timport { ModeWatcher } from \"mode-watcher\";\n\tlet { children } = $props();\n&#x3C;/script>\n\n&#x3C;ModeWatcher />\n{@render children()}\n</code></pre>\n<p>The <code>ModeWatcher</code> component will automatically detect the user's preferences and apply/remove the \"dark\" class, along with the corresponding color-scheme style attribute to the html element.</p>\n<h3>Disable Tracking</h3>\n<p><code>ModeWatcher</code> will automatically track operating system preferences and apply these if no user preference is set. If you wish to disable this behavior, set the track prop to false:</p>\n<pre><code class=\"language-svelte\">&#x3C;ModeWatcher track={false} />\n</code></pre>\n<h3>Default Mode</h3>\n<p><code>ModeWatcher</code> can be configured with a default mode instead of automatically detecting the user's preference.</p>\n<p>To set a default mode, use the <code>defaultMode</code> prop:</p>\n<pre><code class=\"language-svelte\">&#x3C;ModeWatcher defaultMode=\"dark\" />\n</code></pre>\n<h3>Themes</h3>\n<p>In addition to the <code>dark</code>, <code>light</code>, and <code>system</code> modes, <code>ModeWatcher</code> can also be configured with a theme which will be applied to the root <code>html</code> element like so:</p>\n<pre><code class=\"language-html\">&#x3C;html data-theme=\"your-custom-theme\">&#x3C;/html>\n</code></pre>\n<h3>Theme Colors</h3>\n<p><code>ModeWatcher</code> can manage the <code>theme-color</code> meta tag for you.</p>\n<p>To enable this, set the <code>themeColors</code> prop to your preferred colors:</p>\n<pre><code class=\"language-svelte\">&#x3C;ModeWatcher themeColors={{ dark: \"#000\", light: \"#fff\" }} />\n</code></pre>\n<h3>Custom Class Names</h3>\n<p>By default, <code>ModeWatcher</code> will add the <code>dark</code> class to the root <code>html</code> element when the mode is dark, and remove it when the mode is light. You can customize this behavior by passing an array of classNames to the <code>darkClassNames</code> and/or <code>lightClassNames</code> props:</p>\n<pre><code class=\"language-svelte\">&#x3C;ModeWatcher darkClassNames={[\"dddd\"]} lightClassNames={[\"fff\"]} />\n</code></pre>\n<p>Now, when the mode is dark, the root <code>html</code> element will have the <code>dddd</code> class, and when the mode is light, the root <code>html</code> element will have the <code>fff</code> class.</p>\n<h3>Custom Local Storage Keys</h3>\n<p>By default, <code>ModeWatcher</code> will use the following local storage keys to store the mode and theme:</p>\n<ul>\n<li><code>mode-watcher-mode</code></li>\n<li><code>mode-watcher-theme</code></li>\n</ul>\n<p>You can customize these keys by passing a custom <code>modeStorageKey</code> and/or <code>themeStorageKey</code> to the <code>ModeWatcher</code> component:</p>\n<pre><code class=\"language-svelte\">&#x3C;ModeWatcher modeStorageKey=\"my-mode-key\" themeStorageKey=\"my-theme-key\" />\n</code></pre>\n<h3>Nonce</h3>\n<p>You can use the <code>nonce</code> prop to allow-list mode-watcher if you are using a Content Security Policy. This will be applied to the <code>&#x3C;script></code> tag responsible for setting the initial mode before a FOUC occurs.</p>\n<pre><code class=\"language-svelte\">&#x3C;ModeWatcher nonce=\"my-secure-nonce\" />\n</code></pre>\n<h2>Props</h2>\n<p>The <code>ModeWatcher</code> component accepts the following props:</p>\n<pre><code class=\"language-ts\">export type Mode = \"system\" | \"dark\" | \"light\";\nexport type ThemeColors = { dark: string; light: string };\n\nexport type ModeWatcherProps = {\n\t/**\n\t * Whether to automatically track operating system preferences\n\t * and update the mode accordingly.\n\t *\n\t * @defaultValue `true`\n\t */\n\ttrack?: boolean;\n\n\t/**\n\t * The default mode to use instead of the user's preference.\n\t *\n\t * @defaultValue `\"system\"`\n\t */\n\tdefaultMode?: Mode;\n\n\t/**\n\t * The default theme to use, which will be applied to the root `html` element\n\t * and can be managed with the `setTheme` function.\n\t *\n\t * @example\n\t * ```html\n\t * &#x3C;html data-theme=\"your-custom-theme\">&#x3C;/html>\n\t * ```\n\t *\n\t * @defaultValue `undefined`\n\t */\n\tdefaultTheme?: string;\n\n\t/**\n\t * The theme colors to use for each mode.\n\t */\n\tthemeColors?: ThemeColors;\n\n\t/**\n\t * Whether to disable transitions when updating the mode.\n\t */\n\tdisableTransitions?: boolean;\n\n\t/**\n\t * The classname to add to the root `html` element when the mode is dark.\n\t *\n\t * @defaultValue `[\"dark\"]`\n\t */\n\tdarkClassNames?: string[];\n\n\t/**\n\t * The classname to add to the root `html` element when the mode is light.\n\t *\n\t * @defaultValue `[]`\n\t */\n\tlightClassNames?: string[];\n\n\t/**\n\t * Optionally provide a custom local storage key to use for storing the mode.\n\t *\n\t * @defaultValue `'mode-watcher-mode'`\n\t */\n\tmodeStorageKey?: string;\n\n\t/**\n\t * Optionally provide a custom local storage key to use for storing the theme.\n\t *\n\t * @defaultValue `'mode-watcher-theme'`\n\t */\n\tthemeStorageKey?: string;\n\n\t/**\n\t * An optional nonce to use for the injected script tag to allow-list mode-watcher\n\t * if you are using a Content Security Policy.\n\t *\n\t * @defaultValue `undefined`\n\t */\n\tnonce?: string;\n\n\t/**\n\t * Whether to disable the injected script tag that sets the initial mode.\n\t * Set this if you are manually injecting the script using a hook.\n\t *\n\t * @defaultValue `false`\n\t */\n\tdisableHeadScriptInjection?: boolean;\n};\n</code></pre>",
    "raw": "<script>\n\timport { Callout } from '@svecodocs/kit'\n</script>\n\n## Usage\n\nAdd the `ModeWatcher` component to your root `+layout.svelte` component.\n\n```svelte title=\"src/routes/+layout.svelte\"\n<script lang=\"ts\">\n\timport { ModeWatcher } from \"mode-watcher\";\n\tlet { children } = $props();\n</script>\n\n<ModeWatcher />\n{@render children()}\n```\n\nThe `ModeWatcher` component will automatically detect the user's preferences and apply/remove the \"dark\" class, along with the corresponding color-scheme style attribute to the html element.\n\n### Disable Tracking\n\n`ModeWatcher` will automatically track operating system preferences and apply these if no user preference is set. If you wish to disable this behavior, set the track prop to false:\n\n```svelte\n<ModeWatcher track={false} />\n```\n\n### Default Mode\n\n`ModeWatcher` can be configured with a default mode instead of automatically detecting the user's preference.\n\nTo set a default mode, use the `defaultMode` prop:\n\n```svelte\n<ModeWatcher defaultMode=\"dark\" />\n```\n\n### Themes\n\nIn addition to the `dark`, `light`, and `system` modes, `ModeWatcher` can also be configured with a theme which will be applied to the root `html` element like so:\n\n```html\n<html data-theme=\"your-custom-theme\"></html>\n```\n\n### Theme Colors\n\n`ModeWatcher` can manage the `theme-color` meta tag for you.\n\nTo enable this, set the `themeColors` prop to your preferred colors:\n\n```svelte\n<ModeWatcher themeColors={{ dark: \"#000\", light: \"#fff\" }} />\n```\n\n### Custom Class Names\n\nBy default, `ModeWatcher` will add the `dark` class to the root `html` element when the mode is dark, and remove it when the mode is light. You can customize this behavior by passing an array of classNames to the `darkClassNames` and/or `lightClassNames` props:\n\n```svelte\n<ModeWatcher darkClassNames={[\"dddd\"]} lightClassNames={[\"fff\"]} />\n```\n\nNow, when the mode is dark, the root `html` element will have the `dddd` class, and when the mode is light, the root `html` element will have the `fff` class.\n\n### Custom Local Storage Keys\n\nBy default, `ModeWatcher` will use the following local storage keys to store the mode and theme:\n\n- `mode-watcher-mode`\n- `mode-watcher-theme`\n\nYou can customize these keys by passing a custom `modeStorageKey` and/or `themeStorageKey` to the `ModeWatcher` component:\n\n```svelte\n<ModeWatcher modeStorageKey=\"my-mode-key\" themeStorageKey=\"my-theme-key\" />\n```\n\n### Nonce\n\nYou can use the `nonce` prop to allow-list mode-watcher if you are using a Content Security Policy. This will be applied to the `<script>` tag responsible for setting the initial mode before a FOUC occurs.\n\n```svelte\n<ModeWatcher nonce=\"my-secure-nonce\" />\n```\n\n## Props\n\nThe `ModeWatcher` component accepts the following props:\n\n````ts\nexport type Mode = \"system\" | \"dark\" | \"light\";\nexport type ThemeColors = { dark: string; light: string };\n\nexport type ModeWatcherProps = {\n\t/**\n\t * Whether to automatically track operating system preferences\n\t * and update the mode accordingly.\n\t *\n\t * @defaultValue `true`\n\t */\n\ttrack?: boolean;\n\n\t/**\n\t * The default mode to use instead of the user's preference.\n\t *\n\t * @defaultValue `\"system\"`\n\t */\n\tdefaultMode?: Mode;\n\n\t/**\n\t * The default theme to use, which will be applied to the root `html` element\n\t * and can be managed with the `setTheme` function.\n\t *\n\t * @example\n\t * ```html\n\t * <html data-theme=\"your-custom-theme\"></html>\n\t * ```\n\t *\n\t * @defaultValue `undefined`\n\t */\n\tdefaultTheme?: string;\n\n\t/**\n\t * The theme colors to use for each mode.\n\t */\n\tthemeColors?: ThemeColors;\n\n\t/**\n\t * Whether to disable transitions when updating the mode.\n\t */\n\tdisableTransitions?: boolean;\n\n\t/**\n\t * The classname to add to the root `html` element when the mode is dark.\n\t *\n\t * @defaultValue `[\"dark\"]`\n\t */\n\tdarkClassNames?: string[];\n\n\t/**\n\t * The classname to add to the root `html` element when the mode is light.\n\t *\n\t * @defaultValue `[]`\n\t */\n\tlightClassNames?: string[];\n\n\t/**\n\t * Optionally provide a custom local storage key to use for storing the mode.\n\t *\n\t * @defaultValue `'mode-watcher-mode'`\n\t */\n\tmodeStorageKey?: string;\n\n\t/**\n\t * Optionally provide a custom local storage key to use for storing the theme.\n\t *\n\t * @defaultValue `'mode-watcher-theme'`\n\t */\n\tthemeStorageKey?: string;\n\n\t/**\n\t * An optional nonce to use for the injected script tag to allow-list mode-watcher\n\t * if you are using a Content Security Policy.\n\t *\n\t * @defaultValue `undefined`\n\t */\n\tnonce?: string;\n\n\t/**\n\t * Whether to disable the injected script tag that sets the initial mode.\n\t * Set this if you are manually injecting the script using a hook.\n\t *\n\t * @defaultValue `false`\n\t */\n\tdisableHeadScriptInjection?: boolean;\n};\n````",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": [
          {
            "title": "Disable Tracking",
            "url": "#disable-tracking",
            "items": []
          },
          {
            "title": "Default Mode",
            "url": "#default-mode",
            "items": []
          },
          {
            "title": "Themes",
            "url": "#themes",
            "items": []
          },
          {
            "title": "Theme Colors",
            "url": "#theme-colors",
            "items": []
          },
          {
            "title": "Custom Class Names",
            "url": "#custom-class-names",
            "items": []
          },
          {
            "title": "Custom Local Storage Keys",
            "url": "#custom-local-storage-keys",
            "items": []
          },
          {
            "title": "Nonce",
            "url": "#nonce",
            "items": []
          }
        ]
      },
      {
        "title": "Props",
        "url": "#props",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/mode-watcher",
    "slugFull": "/api-reference/mode-watcher"
  },
  {
    "title": "mode",
    "description": "A state for tracking the current mode.",
    "path": "api-reference/mode",
    "content": "<p>A readable state that contains the current mode. It can be <code>\"light\"</code> or <code>\"dark\"</code>, or if evaluated on the server, <code>undefined</code>. For user selectable modes, use <a href=\"/docs/api-reference/user-prefers-mode\"><code>userPrefersMode</code></a>.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { setMode, mode } from \"mode-watcher\";\n\n\tfunction handleModeChange() {\n\t\tif (mode.current === \"light\") {\n\t\t\tsetMode(\"dark\");\n\t\t} else {\n\t\t\tsetMode(\"light\");\n\t\t}\n\t}\n&#x3C;/script>\n\n&#x3C;button onclick={handleModeChange}>{$mode}&#x3C;/button>\n</code></pre>",
    "raw": "A readable state that contains the current mode. It can be `\"light\"` or `\"dark\"`, or if evaluated on the server, `undefined`. For user selectable modes, use [`userPrefersMode`](/docs/api-reference/user-prefers-mode).\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { setMode, mode } from \"mode-watcher\";\n\n\tfunction handleModeChange() {\n\t\tif (mode.current === \"light\") {\n\t\t\tsetMode(\"dark\");\n\t\t} else {\n\t\t\tsetMode(\"light\");\n\t\t}\n\t}\n</script>\n\n<button onclick={handleModeChange}>{$mode}</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/mode",
    "slugFull": "/api-reference/mode"
  },
  {
    "title": "resetMode",
    "description": "Programatically reset the mode to system preference.",
    "path": "api-reference/reset-mode",
    "content": "<p>A function that resets the mode to system preferences.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { resetMode } from \"mode-watcher\";\n&#x3C;/script>\n\n&#x3C;button onclick={resetMode}>System&#x3C;/button>\n</code></pre>",
    "raw": "A function that resets the mode to system preferences.\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { resetMode } from \"mode-watcher\";\n</script>\n\n<button onclick={resetMode}>System</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/reset-mode",
    "slugFull": "/api-reference/reset-mode"
  },
  {
    "title": "setMode",
    "description": "Programatically set the mode.",
    "path": "api-reference/set-mode",
    "content": "<p>A function that sets the current mode. It accepts a string with the value <code>\"light\"</code>, <code>\"dark\"</code> or <code>\"system\"</code>.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { setMode } from \"mode-watcher\";\n&#x3C;/script>\n\n&#x3C;button onclick={() => setMode(\"light\")}>Set Light Mode&#x3C;/button>\n&#x3C;button onclick={() => setMode(\"dark\")}>Set Dark Mode&#x3C;/button>\n</code></pre>",
    "raw": "A function that sets the current mode. It accepts a string with the value `\"light\"`, `\"dark\"` or `\"system\"`.\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { setMode } from \"mode-watcher\";\n</script>\n\n<button onclick={() => setMode(\"light\")}>Set Light Mode</button>\n<button onclick={() => setMode(\"dark\")}>Set Dark Mode</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/set-mode",
    "slugFull": "/api-reference/set-mode"
  },
  {
    "title": "setTheme",
    "description": "Programatically set the custom theme.",
    "path": "api-reference/set-theme",
    "content": "<p>A function that sets the current custom theme, not to be confused with <a href=\"/docs/api-reference/set-mode\"><code>setMode</code></a>, which sets the mode (<code>'light'</code>, <code>'dark'</code> or <code>'system'</code>).</p>\n<p>The theme can be set to any arbitrary string value, and is persisted to localStorage and applied to the root <code>html</code> element via the <code>data-theme</code> attribute.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { setTheme } from \"mode-watcher\";\n&#x3C;/script>\n\n&#x3C;button onclick={() => setTheme(\"dracula\")}>Dracula Theme&#x3C;/button>\n&#x3C;button onclick={() => setTheme(\"retro\")}>Retro Theme&#x3C;/button>\n</code></pre>",
    "raw": "A function that sets the current custom theme, not to be confused with [`setMode`](/docs/api-reference/set-mode), which sets the mode (`'light'`, `'dark'` or `'system'`).\n\nThe theme can be set to any arbitrary string value, and is persisted to localStorage and applied to the root `html` element via the `data-theme` attribute.\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { setTheme } from \"mode-watcher\";\n</script>\n\n<button onclick={() => setTheme(\"dracula\")}>Dracula Theme</button>\n<button onclick={() => setTheme(\"retro\")}>Retro Theme</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/set-theme",
    "slugFull": "/api-reference/set-theme"
  },
  {
    "title": "systemPrefersMode",
    "description": "A state for tracking the system's preferred mode.",
    "path": "api-reference/system-prefers-mode",
    "content": "<p>A readable state that represents the operating system's mode preference. It can be <code>\"light\"</code> or <code>\"dark\"</code>, or if evaluated on the server, <code>undefined</code>.</p>\n<p>This state will automatically track changes to the operating system's mode preference unless this is disabled by setting the <code>track</code> prop to <code>false</code> in the <a href=\"/docs/api-reference/mode-watcher\">ModeWatcher</a> component.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { systemPrefersMode } from \"mode-watcher\";\n&#x3C;/script>\n\n&#x3C;p>The system prefers mode is: {systemPrefersMode.current}&#x3C;/p>\n</code></pre>",
    "raw": "A readable state that represents the operating system's mode preference. It can be `\"light\"` or `\"dark\"`, or if evaluated on the server, `undefined`.\n\nThis state will automatically track changes to the operating system's mode preference unless this is disabled by setting the `track` prop to `false` in the [ModeWatcher](/docs/api-reference/mode-watcher) component.\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { systemPrefersMode } from \"mode-watcher\";\n</script>\n\n<p>The system prefers mode is: {systemPrefersMode.current}</p>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/system-prefers-mode",
    "slugFull": "/api-reference/system-prefers-mode"
  },
  {
    "title": "themeStorageKey",
    "description": "The key used to store the theme in local storage.",
    "path": "api-reference/theme-storage-key",
    "content": "<p>The key used to store the <code>theme</code> in local storage.</p>\n<h2>Usage</h2>\n<p>If you wanted to clear the history of the user's mode preference, you could use the <code>themeStorageKey</code> like so:</p>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { themeStorageKey } from \"mode-watcher\";\n\n\tfunction clearThemeFromLocalStorage() {\n\t\tlocalStorage.removeItem(themeStorageKey.current);\n\t}\n&#x3C;/script>\n\n&#x3C;p>Clear the user's theme preference history.&#x3C;/p>\n&#x3C;button onclick={clearThemeFromLocalStorage}>Clear&#x3C;/button>\n</code></pre>",
    "raw": "The key used to store the `theme` in local storage.\n\n## Usage\n\nIf you wanted to clear the history of the user's mode preference, you could use the `themeStorageKey` like so:\n\n```svelte\n<script lang=\"ts\">\n\timport { themeStorageKey } from \"mode-watcher\";\n\n\tfunction clearThemeFromLocalStorage() {\n\t\tlocalStorage.removeItem(themeStorageKey.current);\n\t}\n</script>\n\n<p>Clear the user's theme preference history.</p>\n<button onclick={clearThemeFromLocalStorage}>Clear</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/theme-storage-key",
    "slugFull": "/api-reference/theme-storage-key"
  },
  {
    "title": "theme",
    "description": "A state for tracking the current theme.",
    "path": "api-reference/theme",
    "content": "<p>A readable state that contains the current theme, not to be confused with <a href=\"/docs/api-reference/mode\"><code>mode</code></a>, which contains the current mode (<code>'light'</code>, <code>'dark'</code> or <code>'system'</code>). The theme can be any arbitrary string value set by the developer, and can be used in conjunction with <code>mode</code> to create a custom theme switcher, similar to <a href=\"https://daisyui.com\">Daisy UI</a>'s.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { setTheme, theme } from \"mode-watcher\";\n\n\tfunction cycleTheme() {\n\t\tif (theme.current === \"dracula\") {\n\t\t\tsetTheme(\"retro\");\n\t\t} else {\n\t\t\tsetTheme(\"dracula\");\n\t\t}\n\t}\n&#x3C;/script>\n\n&#x3C;button onclick={cycleTheme}>{theme.current}&#x3C;/button>\n</code></pre>",
    "raw": "A readable state that contains the current theme, not to be confused with [`mode`](/docs/api-reference/mode), which contains the current mode (`'light'`, `'dark'` or `'system'`). The theme can be any arbitrary string value set by the developer, and can be used in conjunction with `mode` to create a custom theme switcher, similar to [Daisy UI](https://daisyui.com)'s.\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { setTheme, theme } from \"mode-watcher\";\n\n\tfunction cycleTheme() {\n\t\tif (theme.current === \"dracula\") {\n\t\t\tsetTheme(\"retro\");\n\t\t} else {\n\t\t\tsetTheme(\"dracula\");\n\t\t}\n\t}\n</script>\n\n<button onclick={cycleTheme}>{theme.current}</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/theme",
    "slugFull": "/api-reference/theme"
  },
  {
    "title": "toggleMode",
    "description": "Programatically toggle the mode.",
    "path": "api-reference/toggle-mode",
    "content": "<p>A function that can be used to programatically toggle the mode.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { toggleMode } from \"mode-watcher\";\n&#x3C;/script>\n\n&#x3C;button onclick={toggleMode}>Toggle Mode&#x3C;/button>\n</code></pre>",
    "raw": "A function that can be used to programatically toggle the mode.\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { toggleMode } from \"mode-watcher\";\n</script>\n\n<button onclick={toggleMode}>Toggle Mode</button>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/toggle-mode",
    "slugFull": "/api-reference/toggle-mode"
  },
  {
    "title": "userPrefersMode",
    "description": "A state for tracking the user's preferred mode.",
    "path": "api-reference/user-prefers-mode",
    "content": "<p>A writeable store that represents the user's mode preference. It can be <code>\"light\"</code>, <code>\"dark\"</code> or <code>\"system\"</code>.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-svelte\">&#x3C;script lang=\"ts\">\n\timport { userPrefersMode } from \"mode-watcher\";\n&#x3C;/script>\n\n&#x3C;p>Your preferred mode is: {userPrefersMode.current}&#x3C;/p>\n</code></pre>",
    "raw": "A writeable store that represents the user's mode preference. It can be `\"light\"`, `\"dark\"` or `\"system\"`.\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { userPrefersMode } from \"mode-watcher\";\n</script>\n\n<p>Your preferred mode is: {userPrefersMode.current}</p>\n```",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      }
    ],
    "section": "API Reference",
    "slug": "api-reference/user-prefers-mode",
    "slugFull": "/api-reference/user-prefers-mode"
  }
]